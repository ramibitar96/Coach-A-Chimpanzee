# Strategy
The server does not keep a record of who is currently logged in; instead, it sends
the client a session token when they log in, which the client must send back to
the server every time they make a request.  The session token is cryptographically
signed by the server, so an attacker can't fake a token.  Again, all communications
are to be done over HTTPS, so an attacker can't steal the session token while
it's in transit.

The token is set to expire after a certain amount of time, so all is not lost if
a session token is compromised.


# Registering a new user

To register a new user, the client should send a POST request over HTTPS.

The request's packet MUST have its Content-Type set to "application/json",
or else expressjs will reject it.

The request's body should be a JSON object with the following format:

{
	"username": "mike_wizowski",
	"password": "ceilia",
	"email": "mwizowski@monstersinc.com",
	"summoner_id": 2319
}

Do not bother encrypting the password yourself; HTTPS will encrypt all
packets for us.


The server will then reply with a JSON object of the following format:

{
	"error_code": <result code>
}

"error_code" is a number(NOT a string) specifying the result of the
operation.  See the following table to learn what each error code means.

| Error code	| Meaning 					|
|---			|---						|
| 0			 	| successful (no error)		|
| 1				| username already exists	|
| 2				| email address invalid		|
| 3				| json object did not contain the required fields	|
| anything else	| currently unused			|


# Logging in
TODO
